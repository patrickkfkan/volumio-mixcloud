{"version":3,"file":"DiscoverModel.js","sourceRoot":"","sources":["../../../src/lib/model/DiscoverModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mcfetch, { Cloudcast, TagAPI, TagAPIGetFeaturedParams, TagAPIGetShowsParams } from 'mixcloud-fetch';\nimport mixcloud from '../MixcloudContext';\nimport BaseModel, { CommonModelPaginationParams, LoopFetchResult, OptionBundle, OptionBundleEntry } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\nimport { CloudcastEntity } from '../entities/CloudcastEntity';\nimport { SlugEntity } from '../entities/SlugEntity';\n\nexport type DiscoverType = 'all' | 'featured';\n\nexport interface DiscoverOptionValues<T extends DiscoverType> {\n  slug: string;\n  orderBy: DiscoverResultsOrderBy<T>;\n  country: string;\n}\n\nexport type DiscoverResultsOrderBy<T extends DiscoverType> =\n  T extends 'all' ? NonNullable<TagAPIGetShowsParams['orderBy']> :\n  T extends 'featured' ? NonNullable<TagAPIGetFeaturedParams['orderBy']>:\n  never;\n\nexport type DiscoverModelDiscoverParams<T extends DiscoverType> =\nCommonModelPaginationParams & (\n  T extends 'all' ? {\n    list: 'all';\n    slug?: string;\n    orderBy?: DiscoverResultsOrderBy<'all'>;\n    country?: string;\n  } :\n  T extends 'featured' ? {\n    list: 'featured';\n    slug?: string;\n    orderBy?: DiscoverResultsOrderBy<'featured'>;\n  } :\n  never\n)\n\nexport type DiscoverFetchResult<T extends DiscoverType> =\n  T extends 'all' ? NonNullable<Awaited<ReturnType<TagAPI['getShows']>>> :\n  T extends 'featured' ? NonNullable<Awaited<ReturnType<TagAPI['getFeatured']>>> :\n  never;\n\nexport interface DiscoverLoopFetchResult<T extends DiscoverType> extends LoopFetchResult<CloudcastEntity> {\n  params: DiscoverFetchResult<T>['params'];\n  selectedTags: SlugEntity[];\n}\n\nexport default class DiscoverModel extends BaseModel {\n\n  getDiscoverResults<T extends DiscoverType>(params: DiscoverModelDiscoverParams<T>) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getDiscoverFetchPromise.bind(this)<T>,\n      getItemsFromFetchResult: this.#getCloudcastsFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromDiscoverFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedCloudcastToEntity.bind(this),\n      onEnd: this.#onDiscoverLoopFetchEnd.bind(this)<T>,\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getDiscoverFetchPromise<T extends DiscoverType>(params: DiscoverModelDiscoverParams<T>): Promise<DiscoverFetchResult<T>>;\n  #getDiscoverFetchPromise<T extends DiscoverType>(params: DiscoverModelDiscoverParams<T>) {\n    const cacheParams: Record<string, any> = {\n      list: params.list,\n      slug: params.slug,\n      orderBy: params.orderBy,\n      limit: params.limit,\n      pageToken: params.pageToken\n    };\n    if (params.list === 'all') {\n      cacheParams.country = params.country;\n    }\n\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('cloudcasts', cacheParams),\n      async () => {\n        const paginationParams = {\n          limit: params.limit,\n          pageToken: params.pageToken\n        };\n        switch (params.list) {\n          case 'all':\n            const fetchedAll = await mcfetch.tag(params.slug || '').getShows({\n              orderBy: params.orderBy,\n              country: params.country,\n              ...paginationParams\n            });\n            if (!fetchedAll) {\n              throw Error(`Tag '${params.slug}' not found`);\n            }\n            return fetchedAll;\n          case 'featured':\n            const fetchedFeatured = await mcfetch.tag(params.slug || '').getFeatured({\n              orderBy: params.orderBy,\n              ...paginationParams\n            });\n            if (!fetchedFeatured) {\n              throw Error(`Tag '${params.slug}' not found`);\n            }\n            return fetchedFeatured;\n        }\n      });\n  }\n\n  #getCloudcastsFromFetchResult<T extends DiscoverType>(result: DiscoverFetchResult<T>) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromDiscoverFetchResult<T extends DiscoverType>(result: DiscoverFetchResult<T>) {\n    return result.nextPageToken && result.items.length > 0 ? result.nextPageToken : null;\n  }\n\n  #convertFetchedCloudcastToEntity(item: Cloudcast): CloudcastEntity {\n    return EntityConverter.convertCloudcast(item);\n  }\n\n  #onDiscoverLoopFetchEnd<T extends DiscoverType>(result: LoopFetchResult<CloudcastEntity>, lastFetchResult: DiscoverFetchResult<T>): DiscoverLoopFetchResult<T> {\n    return {\n      ...result,\n      params: lastFetchResult.params,\n      selectedTags: lastFetchResult.selectedTags.map((tag) => EntityConverter.convertSlugLike(tag))\n    };\n  }\n\n  async getCategories() {\n    const data = await mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('categories'),\n      () => mcfetch.misc.getCategories());\n\n    const result: Record<string, SlugEntity[]> = {};\n    for (const [ section, categories ] of Object.entries(data)) {\n      result[section] = categories.map((c) => EntityConverter.convertSlugLike(c));\n    }\n    return result;\n  }\n\n  getCountries() {\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('countries'),\n      () => mcfetch.misc.getCountries());\n  }\n\n\n  async getDiscoverOptions<T extends DiscoverType>(\n    target: { list: T; orderBy?: DiscoverResultsOrderBy<T>; }): Promise<OptionBundle<DiscoverOptionValues<T>>>;\n  async getDiscoverOptions<T extends DiscoverType>(\n    target: { list: T; orderBy?: DiscoverResultsOrderBy<T>; }): Promise<OptionBundle<DiscoverOptionValues<any>>> {\n\n    let orderBy: OptionBundleEntry<DiscoverResultsOrderBy<any>>['values'];\n    switch (target.list) {\n      case 'all':\n        orderBy = [\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_TRENDING'), value: 'trending' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_POPULAR'), value: 'popular' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_LATEST'), value: 'latest' }\n        ] as OptionBundleEntry<DiscoverResultsOrderBy<'all'>>['values'];\n        break;\n\n      case 'featured':\n        orderBy = [\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_POPULAR'), value: 'popular' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_LATEST'), value: 'latest' }\n        ];\n        break;\n\n      default:\n        throw Error('getDiscoverOptions() error: bad target type');\n    }\n\n    const slug: OptionBundleEntry<string>['values'] = [];\n    for (const categories of Object.values(await this.getCategories())) {\n      slug.push(...categories.map((c) => ({\n        name: c.name,\n        value: c.slug\n      })));\n    }\n    if (target.list === 'featured') {\n      slug.unshift({\n        name: mixcloud.getI18n('MIXCLOUD_ALL_CATEGORIES'),\n        value: ''\n      });\n    }\n\n    let country: OptionBundleEntry<string>['values'];\n    if (target.list === 'all' && target.orderBy === 'trending') {\n      country = (await this.getCountries()).available.map((c) => ({\n        name: c.name,\n        value: c.code\n      }));\n    }\n    else {\n      country = [];\n    }\n\n    return {\n      slug: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_SLUG'),\n        icon: 'fa fa-music',\n        values: slug\n      },\n      orderBy: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_ORDER_BY'),\n        icon: 'fa fa-sort',\n        values: orderBy\n      },\n      country: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_COUNTRY'),\n        icon: 'fa fa-map-marker',\n        values: country\n      }\n    };\n  }\n}\n"]}