{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/model/index.ts"],"names":[],"mappings":";;;;;;AAAA,oEAAqC;AACrC,sEAA8C;AAC9C,oEAA4C;AAC5C,oEAA4C;AAC5C,0DAAkC;AAClC,4DAAoC;AAEpC,IAAY,SAMX;AAND,WAAY,SAAS;IACnB,oCAAuB,CAAA;IACvB,kCAAqB,CAAA;IACrB,kCAAqB,CAAA;IACrB,wBAAW,CAAA;IACX,0BAAa,CAAA;AACf,CAAC,EANW,SAAS,yBAAT,SAAS,QAMpB;AAED,MAAM,mBAAmB,GAAqB;IAC5C,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,wBAAc;IACrC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,uBAAa;IACnC,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,kBAAQ;IACzB,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,mBAAS;CAC5B,CAAC;AAEF,MAAqB,KAAK;IAOxB,MAAM,CAAC,WAAW,CAAC,IAAe;QAChC,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;YAC9B,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC;QACzC,CAAC;QACD,MAAM,KAAK,CAAC,4BAA4B,SAAS,EAAE,CAAC,CAAC;IACvD,CAAC;IAED,MAAM,CAAC,KAAK;QACV,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,MAAM,CAAC,aAAa;QAClB,wBAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACxB,CAAC;CACF;AArBD,wBAqBC","sourcesContent":["import mcfetch from 'mixcloud-fetch';\nimport CloudcastModel from './CloudcastModel';\nimport DiscoverModel from './DiscoverModel';\nimport PlaylistModel from './PlaylistModel';\nimport TagModel from './TagModel';\nimport UserModel from './UserModel';\n\nexport enum ModelType {\n  Cloudcast = 'Cloudcast',\n  Discover = 'Discover',\n  Playlist = 'Playlist',\n  Tag = 'Tag',\n  User = 'User'\n}\n\nconst MODEL_TYPE_TO_CLASS: Record<any, any> = {\n  [ModelType.Cloudcast]: CloudcastModel,\n  [ModelType.Discover]: DiscoverModel,\n  [ModelType.Playlist]: PlaylistModel,\n  [ModelType.Tag]: TagModel,\n  [ModelType.User]: UserModel\n};\n\nexport default class Model {\n\n  static getInstance(type: ModelType.Cloudcast): CloudcastModel;\n  static getInstance(type: ModelType.Discover): DiscoverModel;\n  static getInstance(type: ModelType.Playlist): PlaylistModel;\n  static getInstance(type: ModelType.Tag): TagModel;\n  static getInstance(type: ModelType.User): UserModel;\n  static getInstance(type: ModelType) {\n    if (MODEL_TYPE_TO_CLASS[type]) {\n      return new MODEL_TYPE_TO_CLASS[type]();\n    }\n    throw Error(`Model not found for type ${ModelType}`);\n  }\n\n  static reset() {\n    this.clearLibCache();\n  }\n\n  static clearLibCache() {\n    mcfetch.cache.clear();\n  }\n}\n"]}