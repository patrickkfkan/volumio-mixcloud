{"version":3,"file":"PlaylistModel.js","sourceRoot":"","sources":["../../../src/lib/model/PlaylistModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oEAA6D;AAC7D,yEAA0C;AAC1C,4DAAiE;AACjE,8EAAsD;AAMtD,MAAqB,aAAc,SAAQ,mBAAS;IAApD;;;IAiCA,CAAC;IA/BC,YAAY,CAAC,MAAuC;QAClD,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,cAAc,EAAE,EAAE,GAAG,MAAM,EAAE;YAC7B,eAAe,EAAE,uBAAA,IAAI,yEAA0B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC1D,uBAAuB,EAAE,uBAAA,IAAI,4EAA6B,CAAC,IAAI,CAAC,IAAI,CAAC;YACrE,eAAe,EAAE,uBAAA,IAAI,+EAAgC,CAAC,IAAI,CAAC,IAAI,CAAC;SACjE,CAAC,CAAC;IACL,CAAC;IAgBD,WAAW,CAAC,UAAkB;QAC5B,OAAO,yBAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACjC,IAAI,CAAC,mBAAmB,CAAC,UAAU,EAAE,EAAE,UAAU,EAAE,CAAC,EACpD,KAAK,IAAI,EAAE;YACT,MAAM,IAAI,GAAG,MAAM,wBAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;YAC1D,OAAO,IAAI,CAAC,CAAC,CAAC,uBAAA,IAAI,+EAAgC,MAApC,IAAI,EAAiC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAClE,CAAC,CAAC,CAAC;IACP,CAAC;CACF;qIAtB2B,MAAuC;IAC/D,OAAO,yBAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACjC,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,CAAC,EACpE,GAAG,EAAE,CAAC,wBAAO,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC;AACxD,CAAC,mGAE4B,MAAiC;IAC5D,OAAO,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC7C,CAAC,yGAE+B,IAAc;IAC5C,OAAO,yBAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/C,CAAC;kBAvBkB,aAAa","sourcesContent":["import mcfetch, { ItemList, Playlist } from 'mixcloud-fetch';\nimport mixcloud from '../MixcloudContext';\nimport BaseModel, { LoopFetchCallbackParams } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\n\nexport interface PlaylistModelGetPlaylistsParams extends LoopFetchCallbackParams {\n  username: string;\n}\n\nexport default class PlaylistModel extends BaseModel {\n\n  getPlaylists(params: PlaylistModelGetPlaylistsParams) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getPlaylistsFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getPlaylistsFromFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedPlaylistToEntity.bind(this)\n    });\n  }\n\n  #getPlaylistsFetchPromise(params: PlaylistModelGetPlaylistsParams) {\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('playlists', { username: params.username }),\n      () => mcfetch.user(params.username).getPlaylists());\n  }\n\n  #getPlaylistsFromFetchResult(result: ItemList<Playlist> | null) {\n    return result ? result.items.slice(0) : [];\n  }\n\n  #convertFetchedPlaylistToEntity(item: Playlist) {\n    return EntityConverter.convertPlaylist(item);\n  }\n\n  getPlaylist(playlistId: string) {\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('playlist', { playlistId }),\n      async () => {\n        const data = await mcfetch.playlist(playlistId).getInfo();\n        return data ? this.#convertFetchedPlaylistToEntity(data) : null;\n      });\n  }\n}\n"]}