{"version":3,"file":"LiveStreamModel.js","sourceRoot":"","sources":["../../../src/lib/model/LiveStreamModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mcfetch, { LiveStreamAPI, LiveStreamAPIGetCurrentParams, LiveStream } from 'mixcloud-fetch';\nimport mixcloud from '../MixcloudContext';\nimport BaseModel, { CommonModelPaginationParams, LoopFetchResult, OptionBundle } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\nimport { LiveStreamEntity } from '../entities/LiveStreamEntity';\n\nexport type LiveStreamOrderBy = NonNullable<LiveStreamAPIGetCurrentParams['orderBy']>;\n\nexport interface LiveStreamOptionValues {\n  orderBy: LiveStreamOrderBy;\n  category: string;\n}\n\nexport interface LiveStreamModelGetLiveStreamsParams extends CommonModelPaginationParams {\n  orderBy?: LiveStreamOrderBy;\n  category?: string;\n}\n\nexport type GetLiveStreamsFetchResult = Awaited<ReturnType<LiveStreamAPI['getCurrent']>>;\n\nexport interface GetLiveStreamsLoopFetchResult extends LoopFetchResult<LiveStreamEntity> {\n  params: GetLiveStreamsFetchResult['params'];\n}\n\nexport default class LiveStreamModel extends BaseModel {\n\n  getLiveStreams(params: LiveStreamModelGetLiveStreamsParams) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getLiveStreamsFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getLiveStreamsFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromLiveStreamsFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedLiveStreamToEntity.bind(this),\n      onEnd: this.#onGetLiveStreamsLoopFetchEnd.bind(this),\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getLiveStreamsFetchPromise(params: LiveStreamModelGetLiveStreamsParams) {\n    // Do not cache live stream data\n    return mcfetch.liveStream.getCurrent({\n      category: params.category,\n      orderBy: params.orderBy,\n      limit: params.limit,\n      pageToken: params.pageToken\n    });\n  }\n\n  #getLiveStreamsFromFetchResult(result: GetLiveStreamsFetchResult) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromLiveStreamsFetchResult(result: GetLiveStreamsFetchResult) {\n    return result.nextPageToken && result.items.length > 0 ? result.nextPageToken : null;\n  }\n\n  #convertFetchedLiveStreamToEntity(item: LiveStream) {\n    return EntityConverter.convertLiveStream(item);\n  }\n\n  #onGetLiveStreamsLoopFetchEnd(result: LoopFetchResult<LiveStreamEntity>, lastFetchResult: GetLiveStreamsFetchResult): GetLiveStreamsLoopFetchResult {\n    return {\n      ...result,\n      params: lastFetchResult.params\n    };\n  }\n\n  async getLiveStream(username: string) {\n    const data = await mcfetch.user(username).getLiveStream();\n    return data ? this.#convertFetchedLiveStreamToEntity(data) : null;\n  }\n\n  async getCategories() {\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('liveStreamCategories'),\n      () => mcfetch.liveStream.getCategories()\n    );\n  }\n\n  async getLiveStreamsOptions(): Promise<OptionBundle<LiveStreamOptionValues>> {\n    const categories = await this.getCategories();\n    const categoryValues = categories.map((category) => ({\n      name: category,\n      value: category\n    }));\n    categoryValues.unshift({\n      name: mixcloud.getI18n('MIXCLOUD_ALL_CATEGORIES'),\n      value: ''\n    });\n\n    return {\n      category: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_CATEGORY'),\n        icon: 'fa fa-music',\n        values: categoryValues\n      },\n      orderBy: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_ORDER_BY'),\n        icon: 'fa fa-sort',\n        values: [\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_POPULAR'), value: 'popular' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_MOST_RECENT'), value: 'mostRecent' }\n        ]\n      }\n    };\n  }\n}\n"]}