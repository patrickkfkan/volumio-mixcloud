{"version":3,"file":"UserModel.js","sourceRoot":"","sources":["../../../src/lib/model/UserModel.ts"],"names":[],"mappings":"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","sourcesContent":["import mcfetch, { SearchAPI, SearchAPIGetUsersParams, User, UserAPIGetShowsParams } from 'mixcloud-fetch';\nimport mixcloud from '../MixcloudContext';\nimport BaseModel, { CommonModelPaginationParams, LoopFetchResult, OptionBundle } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\nimport { UserEntity } from '../entities/UserEntity';\n\nexport type UserOrderBy = NonNullable<UserAPIGetShowsParams['orderBy']>;\nexport type UserDateJoined = NonNullable<SearchAPIGetUsersParams['dateJoined']>;\nexport type UserType = NonNullable<SearchAPIGetUsersParams['userType']>;\n\nexport interface UserShowOptionValues {\n  orderBy: UserOrderBy;\n}\n\nexport interface UserSearchOptionValues {\n  dateJoined: UserDateJoined;\n  userType: UserType;\n}\n\nexport interface UserModelGetUsersParams extends CommonModelPaginationParams {\n  keywords: string;\n  dateJoined?: UserDateJoined;\n  userType?: UserType;\n}\n\nexport type GetUsersFetchResult = Awaited<ReturnType<SearchAPI['getUsers']>>;\n\nexport interface GetUsersLoopFetchResult extends LoopFetchResult<UserEntity> {\n  params: GetUsersFetchResult['params'];\n}\n\nexport default class UserModel extends BaseModel {\n\n  getUsers(params: UserModelGetUsersParams) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getUsersFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getUsersFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromUsersFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedUserToEntity.bind(this),\n      onEnd: this.#onGetUsersLoopFetchEnd.bind(this),\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getUsersFetchPromise(params: UserModelGetUsersParams) {\n    const cacheParams: Record<string, any> = {\n      keywords: params.keywords,\n      dateJoined: params.dateJoined,\n      userType: params.userType,\n      limit: params.limit,\n      pageToken: params.pageToken\n    };\n    return mixcloud.getCache().getOrSet<GetUsersFetchResult>(\n      this.getCacheKeyForFetch('users', cacheParams),\n      () => mcfetch.search(params.keywords).getUsers({\n        dateJoined: params.dateJoined,\n        userType: params.userType,\n        limit: params.limit,\n        pageToken: params.pageToken\n      }));\n  }\n\n  #getUsersFromFetchResult(result: GetUsersFetchResult) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromUsersFetchResult(result: GetUsersFetchResult) {\n    return result.nextPageToken && result.items.length > 0 ? result.nextPageToken : null;\n  }\n\n  #convertFetchedUserToEntity(item: User) {\n    return EntityConverter.convertUser(item);\n  }\n\n  #onGetUsersLoopFetchEnd(result: LoopFetchResult<UserEntity>, lastFetchResult: GetUsersFetchResult): GetUsersLoopFetchResult {\n    return {\n      ...result,\n      params: lastFetchResult.params\n    };\n  }\n\n  getUser(username: string) {\n    return mixcloud.getCache().getOrSet(\n      this.getCacheKeyForFetch('user', { username }),\n      async () => {\n        const data = await mcfetch.user(username).getInfo();\n        return data ? this.#convertFetchedUserToEntity(data) : null;\n      });\n  }\n\n  getShowsOptions(): OptionBundle<UserShowOptionValues> {\n    return {\n      orderBy: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_ORDER_BY'),\n        icon: 'fa fa-sort',\n        values: [\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_TRENDING'), value: 'trending' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_POPULAR'), value: 'popular' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_LATEST'), value: 'latest' },\n          { name: mixcloud.getI18n('MIXCLOUD_ORDER_BY_OLDEST'), value: 'oldest' }\n        ]\n      }\n    };\n  }\n\n  getSearchOptions(): OptionBundle<UserSearchOptionValues> {\n    return {\n      dateJoined: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_DATE_JOINED'),\n        icon: 'fa fa-sign-in',\n        values: [\n          { name: mixcloud.getI18n('MIXCLOUD_PAST_WEEK'), value: 'pastWeek' },\n          { name: mixcloud.getI18n('MIXCLOUD_PAST_MONTH'), value: 'pastMonth' },\n          { name: mixcloud.getI18n('MIXCLOUD_PAST_YEAR'), value: 'pastYear' },\n          { name: mixcloud.getI18n('MIXCLOUD_ANY_TIME'), value: 'anyTime' }\n        ]\n      },\n      userType: {\n        name: mixcloud.getI18n('MIXCLOUD_SELECT_USER_TYPE'),\n        icon: 'fa fa-user',\n        values: [\n          { name: mixcloud.getI18n('MIXCLOUD_UPLOADER'), value: 'uploader' },\n          { name: mixcloud.getI18n('MIXCLOUD_LISTENER'), value: 'listener' },\n          { name: mixcloud.getI18n('MIXCLOUD_ANY'), value: 'any' }\n        ]\n      }\n    };\n  }\n}\n"]}