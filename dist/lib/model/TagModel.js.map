{"version":3,"file":"TagModel.js","sourceRoot":"","sources":["../../../src/lib/model/TagModel.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,oEAAyD;AACzD,yEAA0C;AAC1C,4DAAsF;AACtF,8EAAsD;AAStD,MAAqB,QAAS,SAAQ,mBAAS;IAA/C;;;IAgDA,CAAC;IA9CC,OAAO,CAAC,MAA6B;QACnC,OAAO,IAAI,CAAC,SAAS,CAAC;YACpB,cAAc,EAAE,EAAE,GAAG,MAAM,EAAE;YAC7B,eAAe,EAAE,uBAAA,IAAI,0DAAqB,CAAC,IAAI,CAAC,IAAI,CAAC;YACrD,uBAAuB,EAAE,uBAAA,IAAI,6DAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;YAChE,+BAA+B,EAAE,uBAAA,IAAI,0EAAqC,CAAC,IAAI,CAAC,IAAI,CAAC;YACrF,eAAe,EAAE,uBAAA,IAAI,gEAA2B,CAAC,IAAI,CAAC,IAAI,CAAC;YAC3D,KAAK,EAAE,uBAAA,IAAI,4DAAuB,CAAC,IAAI,CAAC,IAAI,CAAC;YAC7C,UAAU,EAAE,MAAM,CAAC,UAAU;YAC7B,SAAS,EAAE,MAAM,CAAC,SAAS;YAC3B,KAAK,EAAE,MAAM,CAAC,KAAK;SACpB,CAAC,CAAC;IACL,CAAC;CAkCF;4GAhCsB,MAA6B;IAChD,MAAM,WAAW,GAAwB;QACvC,QAAQ,EAAE,MAAM,CAAC,QAAQ;QACzB,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC;IACF,OAAO,yBAAQ,CAAC,QAAQ,EAAE,CAAC,QAAQ,CACjC,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,WAAW,CAAC,EAC7C,GAAG,EAAE,CAAC,wBAAO,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;QAC5C,KAAK,EAAE,MAAM,CAAC,KAAK;QACnB,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC,CAAC,CAAC;AACR,CAAC,+EAEuB,MAA0B;IAChD,OAAO,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC/B,CAAC,yGAEoC,MAA0B;IAC7D,OAAO,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;AACvF,CAAC,qFAE0B,IAAS;IAClC,OAAO,yBAAe,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AAC/C,CAAC,6EAEsB,MAAmC,EAAE,eAAmC;IAC7F,OAAO;QACL,GAAG,MAAM;QACT,MAAM,EAAE,eAAe,CAAC,MAAM;KAC/B,CAAC;AACJ,CAAC;kBA/CkB,QAAQ","sourcesContent":["import mcfetch, { SearchAPI, Tag } from 'mixcloud-fetch';\nimport mixcloud from '../MixcloudContext';\nimport BaseModel, { CommonModelPaginationParams, LoopFetchResult } from './BaseModel';\nimport EntityConverter from '../util/EntityConverter';\nimport { SlugEntity } from '../entities/SlugEntity';\n\nexport interface TagModelGetTagsParams extends CommonModelPaginationParams {\n  keywords: string;\n}\n\nexport type GetTagsFetchResult = Awaited<ReturnType<SearchAPI['getTags']>>;\n\nexport default class TagModel extends BaseModel {\n\n  getTags(params: TagModelGetTagsParams) {\n    return this.loopFetch({\n      callbackParams: { ...params },\n      getFetchPromise: this.#getTagsFetchPromise.bind(this),\n      getItemsFromFetchResult: this.#getTagsFromFetchResult.bind(this),\n      getNextPageTokenFromFetchResult: this.#getNextPageTokenFromTagsFetchResult.bind(this),\n      convertToEntity: this.#convertFetchedTagToEntity.bind(this),\n      onEnd: this.#onGetTagsLoopFetchEnd.bind(this),\n      pageOffset: params.pageOffset,\n      pageToken: params.pageToken,\n      limit: params.limit\n    });\n  }\n\n  #getTagsFetchPromise(params: TagModelGetTagsParams) {\n    const cacheParams: Record<string, any> = {\n      keywords: params.keywords,\n      limit: params.limit,\n      pageToken: params.pageToken\n    };\n    return mixcloud.getCache().getOrSet<GetTagsFetchResult>(\n      this.getCacheKeyForFetch('tags', cacheParams),\n      () => mcfetch.search(params.keywords).getTags({\n        limit: params.limit,\n        pageToken: params.pageToken\n      }));\n  }\n\n  #getTagsFromFetchResult(result: GetTagsFetchResult) {\n    return result.items.slice(0);\n  }\n\n  #getNextPageTokenFromTagsFetchResult(result: GetTagsFetchResult) {\n    return result.nextPageToken && result.items.length > 0 ? result.nextPageToken : null;\n  }\n\n  #convertFetchedTagToEntity(item: Tag) {\n    return EntityConverter.convertSlugLike(item);\n  }\n\n  #onGetTagsLoopFetchEnd(result: LoopFetchResult<SlugEntity>, lastFetchResult: GetTagsFetchResult) {\n    return {\n      ...result,\n      params: lastFetchResult.params\n    };\n  }\n}\n"]}