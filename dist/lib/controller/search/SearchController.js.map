{"version":3,"file":"SearchController.js","sourceRoot":"","sources":["../../../../src/lib/controller/search/SearchController.ts"],"names":[],"mappings":";;;;;AAIA,oGAA4E;AAC5E,oFAA4D;AAM5D,MAAqB,gBAAgB;IAEnC,KAAK,CAAC,MAAM,CAAC,KAAkB;QAC7B,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAEnD,MAAM,OAAO,GAAY;YACvB,IAAI,EAAE,MAAM;YACZ,QAAQ,EAAE,SAAS;SACpB,CAAC;QACF,MAAM,aAAa,GAAkB;YACnC,IAAI,EAAE,YAAY;YAClB,QAAQ,EAAE,SAAS;SACpB,CAAC;QACF,MAAM,QAAQ,GAAa;YACzB,IAAI,EAAE,OAAO;YACb,QAAQ,EAAE,SAAS;SACpB,CAAC;QACF,MAAM,UAAU,GAAG;YACjB,YAAY,oBAAU,CAAC,2BAA2B,CAAC,OAAO,CAAC,cAAc;YACzE,YAAY,oBAAU,CAAC,2BAA2B,CAAC,aAAa,CAAC,cAAc;YAC/E,YAAY,oBAAU,CAAC,2BAA2B,CAAC,QAAQ,CAAC,cAAc;SAC3E,CAAC;QACF,MAAM,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,4BAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;QAC5F,MAAM,iBAAiB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAC5D,MAAM,QAAQ,GAAG,iBAAiB,CAAC,MAAM,CAAiB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;YACzE,IAAI,IAAI,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC;gBAC3B,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChF,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,EAAE,EAAE,CAAC,CAAC;QAEP,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAjCD,mCAiCC","sourcesContent":["import { CloudcastView } from '../browse/view-handlers/CloudcastViewHandler';\nimport { TagView } from '../browse/view-handlers/TagViewHandler';\nimport { UserView } from '../browse/view-handlers/UserViewHandler';\nimport { RenderedList } from '../browse/view-handlers/ViewHandler';\nimport ViewHandlerFactory from '../browse/view-handlers/ViewHandlerFactory';\nimport ViewHelper from '../browse/view-handlers/ViewHelper';\n\nexport interface SearchQuery {\n  value: string;\n}\n\nexport default class SearchController {\n\n  async search(query: SearchQuery) {\n    const safeQuery = query.value.replace(/\"/g, '\\\\\"');\n\n    const tagView: TagView = {\n      name: 'tags',\n      keywords: safeQuery\n    };\n    const cloudcastView: CloudcastView = {\n      name: 'cloudcasts',\n      keywords: safeQuery\n    };\n    const userView: UserView = {\n      name: 'users',\n      keywords: safeQuery\n    };\n    const searchUris = [\n      `mixcloud/${ViewHelper.constructUriSegmentFromView(tagView)}@inSection=1`,\n      `mixcloud/${ViewHelper.constructUriSegmentFromView(cloudcastView)}@inSection=1`,\n      `mixcloud/${ViewHelper.constructUriSegmentFromView(userView)}@inSection=1`\n    ];\n    const browsePromises = searchUris.map((uri) => ViewHandlerFactory.getHandler(uri).browse());\n    const searchResultPages = await Promise.all(browsePromises);\n    const allLists = searchResultPages.reduce<RenderedList[]>((result, page) => {\n      if (page.navigation?.lists) {\n        result.push(...page.navigation.lists.filter((list) => list.items.length > 0));\n      }\n      return result;\n    }, []);\n\n    return allLists;\n  }\n}\n"]}