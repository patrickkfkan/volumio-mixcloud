{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/lib/controller/browse/index.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,4EAA6C;AAK7C,4FAAoE;AAEpE,MAAqB,gBAAgB;IAArC;;IAoCA,CAAC;IAlCC;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,SAAS,CAAC,GAAW;QACzB,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAC;QAE1D,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QACtC,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,GAAW;QACpB,yBAAQ,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,0BAA0B,GAAG,EAAE,CAAC,CAAC;QAE3D,MAAM,OAAO,GAAG,uBAAA,IAAI,iEAAY,MAAhB,IAAI,EAAa,GAAG,CAAC,CAAC;QACtC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;CAKF;kHAH6B,GAAW;IACrC,OAAO,4BAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC5C,CAAC;kBAnCkB,gBAAgB","sourcesContent":["import mixcloud from '../../MixcloudContext';\nimport BaseViewHandler from './view-handlers/BaseViewHandler';\nimport { ExplodedTrackInfo } from './view-handlers/ExplodableViewHandler';\nimport View from './view-handlers/View';\nimport { RenderedPage } from './view-handlers/ViewHandler';\nimport ViewHandlerFactory from './view-handlers/ViewHandlerFactory';\n\nexport default class BrowseController {\n\n  /**\n   *  Uri follows a hierarchical view structure, starting with 'mixcloud'.\n   * - If nothing follows 'mixcloud', the view would be 'root'.\n   *\n   * After 'mixcloud/', the uri consists of segments representing the following views:\n   * - discover[@slug=...][@orderBy=...][@country=...]\n   * - featured[@slug=...][@orderBy=...]\n   * - user[@username=...]\n   * - cloudcasts[@username=...[@orderBy=...]][@playlistId=...]\n   * - cloudcast[@cloudcastId=...][@showMoreFromUser=1]\n   * ...\n   */\n  async browseUri(uri: string): Promise<RenderedPage> {\n    mixcloud.getLogger().info(`[mixcloud] browseUri: ${uri}`);\n\n    const handler = this.#getHandler(uri);\n    return handler.browse();\n  }\n\n  /**\n   * Explodable uris:\n   * - cloudcast[@cloudcastId=...][@owner=...]\n   * - liveStream[@username=...]\n   */\n  explodeUri(uri: string): Promise<ExplodedTrackInfo[]> {\n    mixcloud.getLogger().info(`[mixcloud] explodeUri: ${uri}`);\n\n    const handler = this.#getHandler(uri);\n    return handler.explode();\n  }\n\n  #getHandler<V extends View>(uri: string): BaseViewHandler<V> {\n    return ViewHandlerFactory.getHandler(uri);\n  }\n}\n"]}