{"version":3,"file":"TagViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/TagViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import mixcloud from '../../../MixcloudContext';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport { ModelType } from '../../../model';\nimport { RenderedListItem } from './renderers/BaseRenderer';\nimport UIHelper from '../../../util/UIHelper';\nimport { RendererType } from './renderers';\nimport { LoopFetchResult } from '../../../model/BaseModel';\nimport BaseViewHandler from './BaseViewHandler';\nimport { TagModelGetTagsParams } from '../../../model/TagModel';\nimport { SlugEntity } from '../../../entities/SlugEntity';\n\nexport interface TagView extends View {\n  name: 'tags';\n  keywords: string;\n}\n\nexport default class TagViewHandler extends BaseViewHandler<TagView> {\n\n  browse(): Promise<RenderedPage> {\n    const view = this.currentView;\n    if (view.keywords) {\n      return this.#browseSearchResults(view.keywords);\n    }\n    throw Error('Operation not supported');\n  }\n\n  async #browseSearchResults(keywords: string) {\n    const view = this.currentView;\n\n    const tagParams: TagModelGetTagsParams = {\n      keywords,\n      limit: view.inSection ? mixcloud.getConfigValue('itemsPerSection') : mixcloud.getConfigValue('itemsPerPage')\n    };\n\n    if (view.pageRef) {\n      tagParams.pageToken = view.pageRef.pageToken;\n      tagParams.pageOffset = view.pageRef.pageOffset;\n    }\n\n    const tags = await this.getModel(ModelType.Tag).getTags(tagParams);\n\n    const lists: RenderedList[] = [ this.#getTagList(tags) ];\n\n    let title;\n    if (this.currentView.inSection) {\n      title = mixcloud.getI18n(UIHelper.supportsEnhancedTitles() ? 'MIXCLOUD_TAGS' : 'MIXCLOUD_TAGS_FULL');\n    }\n    else {\n      title = mixcloud.getI18n(UIHelper.supportsEnhancedTitles() ? 'MIXCLOUD_TAGS_MATCHING' : 'MIXCLOUD_TAGS_MATCHING_FULL', keywords);\n    }\n    lists[0].title = UIHelper.addMixcloudIconToListTitle(title);\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        lists\n      }\n    };\n  }\n\n  #getTagList(tags: LoopFetchResult<SlugEntity>): RenderedList {\n    const renderer = this.getRenderer(RendererType.Slug);\n    const items = tags.items.reduce<RenderedListItem[]>((result, tag) => {\n      const rendered = renderer.renderToListItem(tag);\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n    const nextPageRef = this.constructPageRef(tags.nextPageToken, tags.nextPageOffset);\n    if (nextPageRef) {\n      const nextUri = this.constructNextUri(nextPageRef);\n      items.push(this.constructNextPageItem(nextUri));\n    }\n\n    return {\n      availableListViews: [ 'list', 'grid' ],\n      items\n    };\n  }\n}\n"]}