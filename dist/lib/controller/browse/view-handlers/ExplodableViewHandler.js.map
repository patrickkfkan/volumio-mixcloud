{"version":3,"file":"ExplodableViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ExplodableViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\nimport { CloudcastEntity } from '../../../entities/CloudcastEntity';\nimport UIHelper from '../../../util/UIHelper';\nimport { CloudcastView } from './CloudcastViewHandler';\nimport { LiveStreamEntity } from '../../../entities/LiveStreamEntity';\nimport { LiveStreamView } from './LiveStreamViewHandler';\n\nexport interface ExplodedTrackInfo {\n  service: 'mixcloud';\n  uri: string;\n  albumart?: string;\n  artist?: string;\n  album?: string;\n  name: string;\n  title: string;\n  duration?: number;\n  samplerate?: string;\n}\n\nexport type StreamableEntity = CloudcastEntity | LiveStreamEntity;\n\nexport default abstract class ExplodableViewHandler<V extends View> extends BaseViewHandler<V> {\n\n  async explode(): Promise<ExplodedTrackInfo[]> {\n    const view = this.currentView;\n    if (view.noExplode) {\n      return [];\n    }\n\n    const tracks = await this.getStreamableEntitiesOnExplode();\n    if (!Array.isArray(tracks)) {\n      const trackInfo = await this.convertStreamableEntityToExplodedTrackInfo(tracks);\n      return trackInfo ? [ trackInfo ] : [];\n    }\n\n    const trackInfoPromises = tracks.map((track) => this.convertStreamableEntityToExplodedTrackInfo(track));\n    return (await Promise.all(trackInfoPromises)).filter((song) => song) as ExplodedTrackInfo[];\n  }\n\n  protected async convertStreamableEntityToExplodedTrackInfo(entity: StreamableEntity): Promise<ExplodedTrackInfo | null> {\n    switch (entity.type) {\n      case 'cloudcast':\n        return this.#convertCloudcastToExplodedTrackInfo(entity);\n      case 'liveStream':\n        return this.#convertLivestreamToExplodedTrackInfo(entity);\n    }\n  }\n\n  protected abstract getStreamableEntitiesOnExplode(): Promise<StreamableEntity | StreamableEntity[]>;\n\n  #convertCloudcastToExplodedTrackInfo(cloudcast: CloudcastEntity): ExplodedTrackInfo {\n    // Track URI: mixcloud/cloudcast@cloudcastId={...}@owner={...}\n    const cloudcastView: CloudcastView = {\n      name: 'cloudcast',\n      cloudcastId: cloudcast.id\n    };\n    if (cloudcast.owner?.username) {\n      cloudcastView.owner = cloudcast.owner.username;\n    }\n    const trackUri = `mixcloud/${ViewHelper.constructUriSegmentFromView(cloudcastView)}`;\n\n    const trackName = !cloudcast.isExclusive ? cloudcast.name : UIHelper.addExclusiveText(cloudcast.name);\n\n    return {\n      service: 'mixcloud',\n      uri: trackUri,\n      albumart: cloudcast.thumbnail,\n      artist: cloudcast.owner?.name || cloudcast.owner?.username,\n      album: '',\n      name: trackName,\n      title: trackName\n    };\n  }\n\n  #convertLivestreamToExplodedTrackInfo(liveStream: LiveStreamEntity): ExplodedTrackInfo | null {\n    if (!liveStream.owner) {\n      return null;\n    }\n\n    // Track URI: mixcloud/livestream@username={...}\n    const liveStreamView: LiveStreamView = {\n      name: 'liveStream',\n      username: liveStream.owner.username\n    };\n    const trackUri = `mixcloud/${ViewHelper.constructUriSegmentFromView(liveStreamView)}`;\n\n    return {\n      service: 'mixcloud',\n      uri: trackUri,\n      albumart: liveStream.thumbnail,\n      artist: liveStream.owner.name || liveStream.owner.username,\n      album: '',\n      name: liveStream.name,\n      title: liveStream.name\n    };\n  }\n}\n"]}