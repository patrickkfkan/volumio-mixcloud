{"version":3,"file":"ExplodableViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ExplodableViewHandler.ts"],"names":[],"mappings":";;;;;AAAA,wEAAgD;AAEhD,8DAAsC;AAEtC,sEAA8C;AAe9C,MAA8B,qBAAmF,SAAQ,yBAAkB;IAEzI,KAAK,CAAC,OAAO;QACX,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;YACnB,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC;YAC3B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC;YAC1D,OAAO,SAAS,CAAC,CAAC,CAAC,CAAE,SAAS,CAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QACxC,CAAC;QAED,MAAM,iBAAiB,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;QAClF,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAwB,CAAC;IAC9F,CAAC;IAES,KAAK,CAAC,oBAAoB,CAAC,KAAQ;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACd,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,SAAS,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC1F,OAAO;YACL,OAAO,EAAE,UAAU;YACnB,GAAG,EAAE,QAAQ;YACb,QAAQ,EAAE,KAAK,CAAC,SAAS;YACzB,MAAM,EAAE,KAAK,CAAC,KAAK,EAAE,IAAI,IAAI,KAAK,CAAC,KAAK,EAAE,QAAQ;YAClD,KAAK,EAAE,EAAE;YACT,IAAI,EAAE,SAAS;YACf,KAAK,EAAE,SAAS;SACjB,CAAC;IACJ,CAAC;IAID;;;OAGG;IACO,WAAW,CAAC,KAAQ;QAC5B,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACf,OAAO,IAAI,CAAC;QACd,CAAC;QACD,MAAM,aAAa,GAAkB;YACnC,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,KAAK,CAAC,EAAE;SACtB,CAAC;QACF,IAAI,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,CAAC;YAC1B,aAAa,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC7C,CAAC;QACD,OAAO,YAAY,oBAAU,CAAC,2BAA2B,CAAC,aAAa,CAAC,EAAE,CAAC;IAC7E,CAAC;CACF;AAtDD,wCAsDC","sourcesContent":["import BaseViewHandler from './BaseViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\nimport { CloudcastEntity } from '../../../entities/CloudcastEntity';\nimport UIHelper from '../../../util/UIHelper';\nimport { CloudcastView } from './CloudcastViewHandler';\n\nexport interface ExplodedTrackInfo {\n  service: 'mixcloud';\n  uri: string;\n  albumart?: string;\n  artist?: string;\n  album?: string;\n  name: string;\n  title: string;\n  duration?: number;\n  samplerate?: string;\n}\n\nexport default abstract class ExplodableViewHandler<V extends View, E extends CloudcastEntity = CloudcastEntity> extends BaseViewHandler<V> {\n\n  async explode(): Promise<ExplodedTrackInfo[]> {\n    const view = this.currentView;\n    if (view.noExplode) {\n      return [];\n    }\n\n    const tracks = await this.getTracksOnExplode();\n    if (!Array.isArray(tracks)) {\n      const trackInfo = await this.parseTrackForExplode(tracks);\n      return trackInfo ? [ trackInfo ] : [];\n    }\n\n    const trackInfoPromises = tracks.map((track) => this.parseTrackForExplode(track));\n    return (await Promise.all(trackInfoPromises)).filter((song) => song) as ExplodedTrackInfo[];\n  }\n\n  protected async parseTrackForExplode(track: E): Promise<ExplodedTrackInfo | null> {\n    const trackUri = this.getTrackUri(track);\n    if (!trackUri) {\n      return null;\n    }\n    const trackName = !track.isExclusive ? track.name : UIHelper.addExclusiveText(track.name);\n    return {\n      service: 'mixcloud',\n      uri: trackUri,\n      albumart: track.thumbnail,\n      artist: track.owner?.name || track.owner?.username,\n      album: '',\n      name: trackName,\n      title: trackName\n    };\n  }\n\n  protected abstract getTracksOnExplode(): Promise<E | E[]>;\n\n  /**\n   * Track uri:\n   * mixcloud/cloudcast@cloudcastId={...}@owner={...}\n   */\n  protected getTrackUri(track: E) {\n    if (!track.url) {\n      return null;\n    }\n    const cloudcastView: CloudcastView = {\n      name: 'cloudcast',\n      cloudcastId: track.id\n    };\n    if (track.owner?.username) {\n      cloudcastView.owner = track.owner.username;\n    }\n    return `mixcloud/${ViewHelper.constructUriSegmentFromView(cloudcastView)}`;\n  }\n}\n"]}