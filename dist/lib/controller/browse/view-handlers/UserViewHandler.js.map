{"version":3,"file":"UserViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/UserViewHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+EAAgD;AAGhD,0CAA2C;AAE3C,mEAAqE;AACrE,oFAA4D;AAC5D,8EAAsD;AACtD,2CAA2C;AAI3C,8DAAsC;AAiBtC,MAAqB,eAAgB,SAAQ,+BAA+B;IAA5E;;;IAuLA,CAAC;IArLC,MAAM;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YAClB,OAAO,uBAAA,IAAI,+DAAY,MAAhB,IAAI,EAAa,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;aACI,IAAI,IAAI,CAAC,QAAQ,EAAE,CAAC;YACvB,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChB,OAAO,uBAAA,IAAI,wEAAqB,MAAzB,IAAI,EAAsB,IAAI,CAAC,MAAM,CAAC,CAAC;YAChD,CAAC;YAED,OAAO,uBAAA,IAAI,wEAAqB,MAAzB,IAAI,EAAsB,IAAI,CAAC,QAAQ,CAAC,CAAC;QAElD,CAAC;QACD,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;IACzC,CAAC;IAyJS,KAAK,CAAC,kBAAkB;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;QAC9B,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;YACnB,MAAM,KAAK,CAAC,yBAAyB,CAAC,CAAC;QACzC,CAAC;QAED,MAAM,eAAe,GAAsC;YACzD,QAAQ,EAAE,IAAI,CAAC,QAAQ;YACvB,KAAK,EAAE,yBAAQ,CAAC,cAAc,CAAC,cAAc,CAAC;SAC/C,CAAC;QAEF,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC,eAAe,CAAC,CAAC;QAC3F,OAAO,UAAU,CAAC,KAAK,CAAC;IAC1B,CAAC;CACF;0EArKC,KAAK,sCAAa,QAAgB;IAChC,MAAM,CAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,CAAE,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC;QACzD,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC;QAC/C,uBAAA,IAAI,6DAAU,MAAd,IAAI,EAAW,QAAQ,CAAC;QACxB,uBAAA,IAAI,iEAAc,MAAlB,IAAI,EAAe,QAAQ,CAAC;KAC7B,CAAC,CAAC;IAEH,MAAM,KAAK,GAAmB;QAC5B,GAAG,QAAQ;QACX,GAAG,YAAY;KAChB,CAAC;IAEF,IAAI,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,EAAE,CAAC;IAClC,IAAI,kBAAQ,CAAC,sBAAsB,EAAE,IAAI,IAAI,EAAE,GAAG,EAAE,CAAC;QACnD,MAAM,UAAU,GAAG,KAAK,CAAC;QACzB,MAAM,IAAI,GAAW;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,IAAI,EAAE,yBAAQ,CAAC,OAAO,CAAC,yBAAyB,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC;YAC7E,IAAI,EAAE,EAAE,IAAI,EAAE,UAAU,EAAE;YAC1B,KAAK,EAAE,oBAAS,CAAC,SAAS;YAC1B,MAAM,EAAE,QAAQ;SACjB,CAAC;QACF,KAAK,GAAG,kBAAQ,CAAC,0BAA0B,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAC5D,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,KAAK,IAAI,kBAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,oBAAS,CAAC,WAAW,CAAC,CAAC;YAC/D,KAAK,IAAI,kBAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,oBAAoB,CAAC,CAAC;QACzD,CAAC;QACD,KAAK,IAAI,UAAU,CAAC;QACpB,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,KAAK,GAAG,kBAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QACpD,CAAC;aACI,CAAC;YACJ,KAAK,GAAG,kBAAQ,CAAC,SAAS,CAAC,KAAK,EAAE,oCAAoC,CAAC,CAAC;QAC1E,CAAC;IACH,CAAC;IACD,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACrB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;IACzB,CAAC;SACI,CAAC;QACJ,KAAK,CAAC,IAAI,CAAC;YACT,KAAK;YACL,kBAAkB,EAAE,CAAE,MAAM,EAAE,MAAM,CAAE;YACtC,KAAK,EAAE,EAAE;SACV,CAAC,CAAC;IACL,CAAC;IAED,OAAO;QACL,UAAU,EAAE;YACV,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACtC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS;YACjF,KAAK;SACN;KACF,CAAC;AACJ,CAAC,8BAED,KAAK,oCAAW,QAAgB;IAC9B,MAAM,aAAa,GAAkB;QACnC,IAAI,EAAE,YAAY;QAClB,QAAQ;KACT,CAAC;IACF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAU,CAAC,2BAA2B,CAAC,aAAa,CAAC,cAAc,CAAC;IAC/F,MAAM,OAAO,GAAG,4BAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;IACpC,OAAO,IAAI,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC;AACtC,CAAC,kCAED,KAAK,wCAAe,QAAgB;IAClC,MAAM,YAAY,GAAiB;QACjC,IAAI,EAAE,WAAW;QACjB,QAAQ;KACT,CAAC;IACF,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAU,CAAC,2BAA2B,CAAC,YAAY,CAAC,cAAc,CAAC;IAC9F,MAAM,OAAO,GAAG,4BAAkB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IACnD,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,MAAM,EAAE,CAAC;IACpC,OAAO,IAAI,CAAC,UAAU,EAAE,KAAK,IAAI,EAAE,CAAC;AACtC,CAAC,uEAEY,KAA8B;IACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,wBAAY,CAAC,IAAI,CAAC,CAAC;IACrD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,CAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;QACpE,MAAM,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,QAAQ,EAAE,CAAC;YACb,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxB,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,cAAc,CAAC,CAAC;IACrF,IAAI,WAAW,EAAE,CAAC;QAChB,MAAM,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACnD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC;IAClD,CAAC;IACD,OAAO;QACL,kBAAkB,EAAE,CAAE,MAAM,EAAE,MAAM,CAAE;QACtC,KAAK;KACN,CAAC;AACJ,CAAC,yCAED,KAAK,+CAAsB,QAAgB;IACzC,MAAM,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC;IAE9B,MAAM,UAAU,GAA4B;QAC1C,QAAQ;QACR,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,yBAAQ,CAAC,cAAc,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,yBAAQ,CAAC,cAAc,CAAC,cAAc,CAAC;QAC5G,UAAU,EAAE,IAAI,CAAC,UAAU;QAC3B,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACxB,CAAC;IAEF,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;QACjB,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QAC9C,UAAU,CAAC,UAAU,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;IAClD,CAAC;IAED,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC;IAC5C,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC/C,MAAM,KAAK,GAAmB,EAAE,CAAC;IAEjC,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC;QAC1C,eAAe,EAAE,KAAK,IAAI,EAAE,CAAC,KAAK,CAAC,gBAAgB,EAAE;QACrD,eAAe,EAAE,KAAK,CAAC,MAAM;QAC7B,cAAc,EAAE,GAAG,EAAE,CAAC,IAAI;KAC3B,CAAC,CAAC;IACH,IAAI,UAAU,EAAE,CAAC;QACf,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACzB,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,uBAAA,IAAI,gEAAa,MAAjB,IAAI,EAAc,KAAK,CAAC,CAAC,CAAC;IAErC,IAAI,KAAK,CAAC;IACV,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC;QACnB,KAAK,GAAG,yBAAQ,CAAC,OAAO,CAAC,kBAAQ,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC;IACzG,CAAC;SACI,CAAC;QACJ,KAAK,GAAG,yBAAQ,CAAC,OAAO,CAAC,kBAAQ,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,8BAA8B,EAAE,QAAQ,CAAC,CAAC;IACrI,CAAC;IACD,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,kBAAQ,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;IAE5D,OAAO;QACL,UAAU,EAAE;YACV,IAAI,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACtC,KAAK;SACN;KACF,CAAC;AACJ,CAAC,uFAEoB,MAAc;IACjC,OAAO,IAAI,CAAC,kBAAkB,CAAC;QAC7B,eAAe,EAAE,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAS,CAAC,IAAI,CAAC,CAAC,gBAAgB,EAAE;QAC7E,YAAY,EAAE,MAAM;KACrB,CAAC,CAAC;AACL,CAAC;kBAvKkB,eAAe","sourcesContent":["import mixcloud from '../../../MixcloudContext';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport { ModelType } from '../../../model';\nimport { RenderedListItem } from './renderers/BaseRenderer';\nimport UIHelper, { UILink, UI_STYLES } from '../../../util/UIHelper';\nimport ExplodableViewHandler from './ExplodableViewHandler';\nimport ViewHandlerFactory from './ViewHandlerFactory';\nimport { RendererType } from './renderers';\nimport { GetUsersLoopFetchResult, UserModelGetUsersParams } from '../../../model/UserModel';\nimport { CloudcastModelGetCloudcastsParams } from '../../../model/CloudcastModel';\nimport { CloudcastView } from './CloudcastViewHandler';\nimport ViewHelper from './ViewHelper';\nimport { PlaylistView } from './PlaylistViewHandler';\n\nexport interface UserView extends View {\n  name: 'user' | 'users';\n\n  username?: string;\n\n  // Search\n  keywords?: string;\n  dateJoined?: UserModelGetUsersParams['dateJoined'];\n  userType?: UserModelGetUsersParams['userType'];\n\n  // Search options\n  select?: 'dateJoined' | 'userType';\n}\n\nexport default class UserViewHandler extends ExplodableViewHandler<UserView> {\n\n  browse(): Promise<RenderedPage> {\n    const view = this.currentView;\n    if (view.username) {\n      return this.#browseUser(view.username);\n    }\n    else if (view.keywords) {\n      if (view.select) {\n        return this.#browseSearchOptions(view.select);\n      }\n\n      return this.#browseSearchResults(view.keywords);\n\n    }\n    throw Error('Operation not supported');\n  }\n\n  async #browseUser(username: string) {\n    const [ user, showList, playlistList ] = await Promise.all([\n      this.getModel(ModelType.User).getUser(username),\n      this.#getShows(username),\n      this.#getPlaylists(username)\n    ]);\n\n    const lists: RenderedList[] = [\n      ...showList,\n      ...playlistList\n    ];\n\n    let title = lists[0]?.title || '';\n    if (UIHelper.supportsEnhancedTitles() && user?.url) {\n      const firstTitle = title;\n      const link: UILink = {\n        url: user.url,\n        text: mixcloud.getI18n('MIXCLOUD_VIEW_LINK_USER', user.name || user.username),\n        icon: { type: 'mixcloud' },\n        style: UI_STYLES.VIEW_LINK,\n        target: '_blank'\n      };\n      title = UIHelper.constructListTitleWithLink('', link, true);\n      if (user.about) {\n        title += UIHelper.wrapInDiv(user.about, UI_STYLES.DESCRIPTION);\n        title += UIHelper.wrapInDiv(' ', 'padding-top: 36px;');\n      }\n      title += firstTitle;\n      if (user.about) {\n        title = UIHelper.wrapInDiv(title, 'width: 100%;');\n      }\n      else {\n        title = UIHelper.wrapInDiv(title, 'width: 100%; margin-bottom: -24px;');\n      }\n    }\n    if (lists.length > 0) {\n      lists[0].title = title;\n    }\n    else {\n      lists.push({\n        title,\n        availableListViews: [ 'list', 'grid' ],\n        items: []\n      });\n    }\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        info: user ? this.getRenderer(RendererType.User).renderToHeader(user) : undefined,\n        lists\n      }\n    };\n  }\n\n  async #getShows(username: string) {\n    const cloudcastView: CloudcastView = {\n      name: 'cloudcasts',\n      username\n    };\n    const uri = `${this.uri}/${ViewHelper.constructUriSegmentFromView(cloudcastView)}@inSection=1`;\n    const handler = ViewHandlerFactory.getHandler(uri);\n    const page = await handler.browse();\n    return page.navigation?.lists || [];\n  }\n\n  async #getPlaylists(username: string) {\n    const playlistView: PlaylistView = {\n      name: 'playlists',\n      username\n    };\n    const uri = `${this.uri}/${ViewHelper.constructUriSegmentFromView(playlistView)}@inSection=1`;\n    const handler = ViewHandlerFactory.getHandler(uri);\n    const page = await handler.browse();\n    return page.navigation?.lists || [];\n  }\n\n  #getUserList(users: GetUsersLoopFetchResult): RenderedList {\n    const renderer = this.getRenderer(RendererType.User);\n    const items = users.items.reduce<RenderedListItem[]>((result, user) => {\n      const rendered = renderer.renderToListItem(user);\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n    const nextPageRef = this.constructPageRef(users.nextPageToken, users.nextPageOffset);\n    if (nextPageRef) {\n      const nextUri = this.constructNextUri(nextPageRef);\n      items.push(this.constructNextPageItem(nextUri));\n    }\n    return {\n      availableListViews: [ 'list', 'grid' ],\n      items\n    };\n  }\n\n  async #browseSearchResults(keywords: string) {\n    const view = this.currentView;\n\n    const userParams: UserModelGetUsersParams = {\n      keywords,\n      limit: view.inSection ? mixcloud.getConfigValue('itemsPerSection') : mixcloud.getConfigValue('itemsPerPage'),\n      dateJoined: view.dateJoined,\n      userType: view.userType\n    };\n\n    if (view.pageRef) {\n      userParams.pageToken = view.pageRef.pageToken;\n      userParams.pageOffset = view.pageRef.pageOffset;\n    }\n\n    const model = this.getModel(ModelType.User);\n    const users = await model.getUsers(userParams);\n    const lists: RenderedList[] = [];\n\n    const optionList = await this.getOptionList({\n      getOptionBundle: async () => model.getSearchOptions(),\n      currentSelected: users.params,\n      showOptionName: () => true\n    });\n    if (optionList) {\n      lists.push(optionList);\n    }\n\n    lists.push(this.#getUserList(users));\n\n    let title;\n    if (view.inSection) {\n      title = mixcloud.getI18n(UIHelper.supportsEnhancedTitles() ? 'MIXCLOUD_USERS' : 'MIXCLOUD_USERS_FULL');\n    }\n    else {\n      title = mixcloud.getI18n(UIHelper.supportsEnhancedTitles() ? 'MIXCLOUD_USERS_MATCHING' : 'MIXCLOUD_USERS_MATCHING_FULL', keywords);\n    }\n    lists[0].title = UIHelper.addMixcloudIconToListTitle(title);\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        lists\n      }\n    };\n  }\n\n  #browseSearchOptions(option: string) {\n    return this.browseOptionValues({\n      getOptionBundle: async () => this.getModel(ModelType.User).getSearchOptions(),\n      targetOption: option\n    });\n  }\n\n  protected async getTracksOnExplode() {\n    const view = this.currentView;\n    if (!view.username) {\n      throw Error('Operation not supported');\n    }\n\n    const cloudcastParams: CloudcastModelGetCloudcastsParams = {\n      username: view.username,\n      limit: mixcloud.getConfigValue('itemsPerPage')\n    };\n\n    const cloudcasts = await this.getModel(ModelType.Cloudcast).getCloudcasts(cloudcastParams);\n    return cloudcasts.items;\n  }\n}\n"]}