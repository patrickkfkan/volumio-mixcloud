{"version":3,"file":"PlaylistViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/PlaylistViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import mixcloud from '../../../MixcloudContext';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport { ModelType } from '../../../model';\nimport { RenderedListItem } from './renderers/BaseRenderer';\nimport UIHelper from '../../../util/UIHelper';\nimport ExplodableViewHandler from './ExplodableViewHandler';\nimport { RendererType } from './renderers';\nimport { PlaylistModelGetPlaylistsParams } from '../../../model/PlaylistModel';\nimport { CloudcastModelGetCloudcastsParams } from '../../../model/CloudcastModel';\nimport { LoopFetchResult } from '../../../model/BaseModel';\nimport { PlaylistEntity } from '../../../entities/PlaylistEntity';\nimport { UserEntity } from '../../../entities/UserEntity';\n\nexport interface PlaylistView extends View {\n  name: 'playlist' | 'playlists';\n\n  username?: string;\n\n  // For explode\n  playlistId?: string;\n}\n\nexport default class PlaylistViewHandler extends ExplodableViewHandler<PlaylistView> {\n\n  browse(): Promise<RenderedPage> {\n    const view = this.currentView;\n    if (view.username) {\n      return this.#browseUserPlaylists(view.username);\n    }\n    throw Error('Operation not supported');\n  }\n\n  async #browseUserPlaylists(username: string) {\n    const playlistParams: PlaylistModelGetPlaylistsParams = {\n      username\n    };\n\n    const [ user, playlists ] = await Promise.all([\n      this.getModel(ModelType.User).getUser(username),\n      this.getModel(ModelType.Playlist).getPlaylists(playlistParams)\n    ]);\n\n    const lists: RenderedList[] = [];\n\n    if (playlists.items.length > 0) {\n      lists.push(this.#getPlaylistList(user, playlists));\n      let listTitle = mixcloud.getI18n('MIXCLOUD_PLAYLISTS');\n      if (!this.currentView.inSection) {\n        const backLink = this.constructPrevViewLink(mixcloud.getI18n('MIXCLOUD_BACK_LINK_USER'));\n        listTitle = UIHelper.constructListTitleWithLink(listTitle, backLink, true);\n      }\n      lists[0].title = listTitle;\n    }\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        info: user ? this.getRenderer(RendererType.User).renderToHeader(user) : undefined,\n        lists\n      }\n    };\n  }\n\n  #getPlaylistList(user: UserEntity | null, playlists: LoopFetchResult<PlaylistEntity>): RenderedList {\n    const renderer = this.getRenderer(RendererType.Playlist);\n    const items = playlists.items.reduce<RenderedListItem[]>((result, playlist) => {\n      const rendered = renderer.renderToListItem({\n        ...playlist,\n        owner: user || undefined\n      });\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n    const nextPageRef = this.constructPageRef(playlists.nextPageToken, playlists.nextPageOffset);\n    if (nextPageRef) {\n      const nextUri = this.constructNextUri(nextPageRef);\n      items.push(this.constructNextPageItem(nextUri));\n    }\n\n    return {\n      availableListViews: [ 'list', 'grid' ],\n      items\n    };\n  }\n\n  protected async getTracksOnExplode() {\n    const view = this.currentView;\n    if (!view.playlistId) {\n      throw Error('Operation not supported');\n    }\n\n    const cloudcastParams: CloudcastModelGetCloudcastsParams = {\n      playlistId: view.playlistId,\n      limit: mixcloud.getConfigValue('itemsPerPage')\n    };\n\n    const cloudcasts = await this.getModel(ModelType.Cloudcast).getCloudcasts(cloudcastParams);\n    return cloudcasts.items;\n  }\n}\n"]}