{"version":3,"file":"ViewHandlerFactory.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/ViewHandlerFactory.ts"],"names":[],"mappings":";;;;;AACA,wEAAgD;AAChD,kFAA0D;AAE1D,8DAAsC;AACtC,gFAAwD;AACxD,gFAAwD;AACxD,gFAAwD;AACxD,sEAA8C;AAC9C,wEAAgD;AAChD,oFAA4D;AAK5D,MAAM,kBAAkB,GAA2C;IACjE,MAAM,EAAE,yBAAe;IACvB,WAAW,EAAE,8BAAoB;IACjC,YAAY,EAAE,8BAAoB;IAClC,UAAU,EAAE,6BAAmB;IAC/B,UAAU,EAAE,6BAAmB;IAC/B,UAAU,EAAE,6BAAmB;IAC/B,WAAW,EAAE,6BAAmB;IAChC,MAAM,EAAE,wBAAc;IACtB,MAAM,EAAE,yBAAe;IACvB,OAAO,EAAE,yBAAe;IACxB,YAAY,EAAE,+BAAqB;IACnC,aAAa,EAAE,+BAAqB;CACrC,CAAC;AAEF,MAAqB,kBAAkB;IAErC,MAAM,CAAC,UAAU,CAAiB,GAAW;QAC3C,MAAM,KAAK,GAAG,oBAAU,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QAC9C,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;QAChC,MAAM,aAAa,GAAG,KAAK,CAAC;QAE5B,IAAI,CAAC,WAAW,EAAE,CAAC;YACjB,MAAM,KAAK,CAAC,iCAAiC,CAAC,CAAC;QACjD,CAAC;QAED,OAAO,IAAI,kBAAkB,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;IACnF,CAAC;CACF;AAbD,qCAaC","sourcesContent":["import BaseViewHandler from './BaseViewHandler';\nimport RootViewHandler from './RootViewHandler';\nimport CloudcastViewHandler from './CloudcastViewHandler';\nimport View from './View';\nimport ViewHelper from './ViewHelper';\nimport DiscoverViewHandler from './DiscoverViewHandler';\nimport FeaturedViewHandler from './FeaturedViewHandler';\nimport PlaylistViewHandler from './PlaylistViewHandler';\nimport TagViewHandler from './TagViewHandler';\nimport UserViewHandler from './UserViewHandler';\nimport LiveStreamViewHandler from './LiveStreamViewHandler';\n\ntype HandlerClass<V extends View, T extends BaseViewHandler<V>> =\n  new (uri: string, currentView: V, previousViews: View[]) => T;\n\nconst VIEW_NAME_TO_CLASS: Record<string, HandlerClass<any, any>> = {\n  'root': RootViewHandler,\n  'cloudcast': CloudcastViewHandler,\n  'cloudcasts': CloudcastViewHandler,\n  'discover': DiscoverViewHandler,\n  'featured': FeaturedViewHandler,\n  'playlist': PlaylistViewHandler,\n  'playlists': PlaylistViewHandler,\n  'tags': TagViewHandler,\n  'user': UserViewHandler,\n  'users': UserViewHandler,\n  'liveStream': LiveStreamViewHandler,\n  'liveStreams': LiveStreamViewHandler\n};\n\nexport default class ViewHandlerFactory {\n\n  static getHandler<V extends View>(uri: string): BaseViewHandler<V> {\n    const views = ViewHelper.getViewsFromUri(uri);\n    const currentView = views.pop();\n    const previousViews = views;\n\n    if (!currentView) {\n      throw Error('Invalid URI: no parseable view.');\n    }\n\n    return new VIEW_NAME_TO_CLASS[currentView.name](uri, currentView, previousViews);\n  }\n}\n"]}