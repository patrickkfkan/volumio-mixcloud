{"version":3,"file":"LiveStreamViewHandler.js","sourceRoot":"","sources":["../../../../../src/lib/controller/browse/view-handlers/LiveStreamViewHandler.ts"],"names":[],"mappings":"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","sourcesContent":["import mixcloud from '../../../MixcloudContext';\nimport View from './View';\nimport { RenderedList, RenderedPage } from './ViewHandler';\nimport { ModelType } from '../../../model';\nimport { RenderedListItem } from './renderers/BaseRenderer';\nimport ExplodableViewHandler from './ExplodableViewHandler';\nimport { RendererType } from './renderers';\nimport { LoopFetchResult } from '../../../model/BaseModel';\nimport { LiveStreamModelGetLiveStreamsParams, LiveStreamOrderBy } from '../../../model/LiveStreamModel';\nimport { LiveStreamEntity } from '../../../entities/LiveStreamEntity';\n\nexport interface LiveStreamView extends View {\n  name: 'liveStream' | 'liveStreams';\n\n  // For browse current live streams\n  category?: string;\n  orderBy?: LiveStreamOrderBy;\n  select?: 'category' | 'orderBy';\n\n  // For explode\n  username?: string;\n}\n\nexport default class LiveStreamViewHandler extends ExplodableViewHandler<LiveStreamView> {\n\n  browse(): Promise<RenderedPage> {\n    const view = this.currentView;\n    if (view.select) {\n      return this.#browseLiveStreamOptions(view.select);\n    }\n    return this.#browseLiveStreams();\n  }\n\n  async #browseLiveStreams() {\n    const view = this.currentView;\n    const liveStreamParams: LiveStreamModelGetLiveStreamsParams = {\n      category: view.category || '',\n      limit: view.inSection ? mixcloud.getConfigValue('itemsPerSection') : mixcloud.getConfigValue('itemsPerPage')\n    };\n    if (view.pageRef) {\n      liveStreamParams.pageToken = view.pageRef.pageToken;\n      liveStreamParams.pageOffset = view.pageRef.pageOffset;\n    }\n    if (view.orderBy) {\n      liveStreamParams.orderBy = view.orderBy;\n    }\n\n    const liveStreamModel = this.getModel(ModelType.LiveStream);\n    const liveStreams = await liveStreamModel.getLiveStreams(liveStreamParams);\n\n    const lists: RenderedList[] = [];\n\n    if (liveStreams.items.length > 0) {\n      const optionList = await this.getOptionList({\n        getOptionBundle: async () => liveStreamModel.getLiveStreamsOptions(),\n        currentSelected: liveStreams.params\n      });\n\n      if (optionList) {\n        lists.push(optionList);\n      }\n\n      lists.push(this.#getLiveStreamList(liveStreams));\n\n      lists[0].title = mixcloud.getI18n('MIXCLOUD_LIVE_STREAMING_NOW');\n    }\n\n    return {\n      navigation: {\n        prev: { uri: this.constructPrevUri() },\n        lists\n      }\n    };\n  }\n\n  #getLiveStreamList(liveStreams: LoopFetchResult<LiveStreamEntity>): RenderedList {\n    const renderer = this.getRenderer(RendererType.LiveStream);\n    const items = liveStreams.items.reduce<RenderedListItem[]>((result, liveStream) => {\n      const rendered = renderer.renderToListItem({\n        ...liveStream\n      });\n      if (rendered) {\n        result.push(rendered);\n      }\n      return result;\n    }, []);\n    const nextPageRef = this.constructPageRef(liveStreams.nextPageToken, liveStreams.nextPageOffset);\n    if (nextPageRef) {\n      const nextUri = this.constructNextUri(nextPageRef);\n      items.push(this.constructNextPageItem(nextUri));\n    }\n\n    return {\n      availableListViews: [ 'list', 'grid' ],\n      items\n    };\n  }\n\n  #browseLiveStreamOptions(option: string) {\n    return this.browseOptionValues({\n      getOptionBundle: async () => this.getModel(ModelType.LiveStream).getLiveStreamsOptions(),\n      targetOption: option\n    });\n  }\n\n  protected async getStreamableEntitiesOnExplode() {\n    const view = this.currentView;\n    if (!view.username) {\n      throw Error('Operation not supported');\n    }\n    const liveStream = await this.getModel(ModelType.LiveStream).getLiveStream(view.username);\n    if (!liveStream) {\n      return [];\n    }\n    return liveStream;\n  }\n}\n"]}