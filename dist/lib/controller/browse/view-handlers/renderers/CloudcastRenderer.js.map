{"version":3,"file":"CloudcastRenderer.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/CloudcastRenderer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kEAAgF;AAEhF,kFAAmD;AACnD,sEAAgE;AAEhE,+DAAuC;AAEvC,MAAqB,iBAAkB,SAAQ,sBAA6B;IAE1E,gBAAgB,CACd,SAA0B,EAC1B,SAAoC,QAAQ,EAC5C,gBAAgB,GAAG,KAAK;QAExB,IAAI,IAA8B,CAAC;QACnC,IAAI,KAAa,CAAC;QAClB,IAAI,KAAyB,CAAC;QAC9B,IAAI,MAA0B,CAAC;QAC/B,IAAI,QAA4B,CAAC;QACjC,IAAI,QAA4B,CAAC;QACjC,IAAI,IAAwB,CAAC;QAC7B,IAAI,GAAW,CAAC;QAEhB,QAAQ,MAAM,EAAE,CAAC;YACf,KAAK,QAAQ;gBACX,IAAI,GAAG,QAAQ,CAAC;gBAChB,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC;gBACvB,KAAK,GAAG,yBAAQ,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;gBAC1C,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC;gBAC5D,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;gBAC9B,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC;gBAE/B,MAAM,aAAa,GAAkB;oBACnC,IAAI,EAAE,WAAW;oBACjB,WAAW,EAAE,SAAS,CAAC,EAAE;iBAC1B,CAAC;gBACF,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,IAAI,oBAAU,CAAC,2BAA2B,CAAC,aAAa,CAAC,EAAE,CAAC;gBAE7E,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;oBAC1B,KAAK,GAAG,kBAAQ,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC3C,CAAC;gBACD,IAAI,gBAAgB,EAAE,CAAC;oBACrB,GAAG,IAAI,qBAAqB,CAAC;gBAC/B,CAAC;gBACD,MAAM;YAER,KAAK,cAAc;gBACjB,IAAI,SAAS,CAAC,WAAW,EAAE,CAAC;oBAC1B,IAAI,GAAG,cAAc,CAAC;oBACtB,KAAK,GAAG,kBAAQ,CAAC,SAAS,CAAC,yBAAQ,CAAC,OAAO,CAAC,yBAAyB,CAAC,EAAE,oBAAS,CAAC,cAAc,CAAC,CAAC;oBAClG,GAAG,GAAG,GAAG,IAAI,CAAC,GAAG,cAAc,CAAC;oBAChC,IAAI,GAAG,WAAW,CAAC;gBACrB,CAAC;qBACI,CAAC;oBACJ,IAAI,GAAG,MAAM,CAAC;oBACd,KAAK,GAAG,yBAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;oBAC/C,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC;oBAC9B,QAAQ,GAAG,SAAS,CAAC,SAAS,CAAC;oBAC/B,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;gBACjB,CAAC;gBACD,MAAM;QACV,CAAC;QAED,OAAO;YACL,OAAO,EAAE,UAAU;YACnB,IAAI;YACJ,KAAK;YACL,KAAK;YACL,MAAM;YACN,QAAQ;YACR,QAAQ;YACR,IAAI;YACJ,GAAG;SACJ,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,SAA0B;QACvC,OAAO;YACL,GAAG,EAAE,IAAI,CAAC,GAAG;YACb,OAAO,EAAE,UAAU;YACnB,IAAI,EAAE,MAAM;YACZ,KAAK,EAAE,SAAS,CAAC,IAAI;YACrB,MAAM,EAAE,yBAAQ,CAAC,OAAO,CAAC,sBAAsB,EAAE,SAAS,CAAC,KAAK,EAAE,IAAI,IAAI,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC;YACpG,QAAQ,EAAE,SAAS,CAAC,SAAS;SAC9B,CAAC;IACJ,CAAC;CACF;AA/ED,oCA+EC","sourcesContent":["import BaseRenderer, { RenderedHeader, RenderedListItem } from './BaseRenderer';\nimport { CloudcastEntity } from '../../../../entities/CloudcastEntity';\nimport mixcloud from '../../../../MixcloudContext';\nimport UIHelper, { UI_STYLES } from '../../../../util/UIHelper';\nimport { CloudcastView } from '../CloudcastViewHandler';\nimport ViewHelper from '../ViewHelper';\n\nexport default class CloudcastRenderer extends BaseRenderer<CloudcastEntity> {\n\n  renderToListItem(\n    cloudcast: CloudcastEntity,\n    asType: 'folder' | 'playShowItem' = 'folder',\n    showMoreFromUser = false): RenderedListItem | null {\n\n    let type: RenderedListItem['type'];\n    let title: string;\n    let album: string | undefined;\n    let artist: string | undefined;\n    let duration: number | undefined;\n    let albumart: string | undefined;\n    let icon: string | undefined;\n    let uri: string;\n\n    switch (asType) {\n      case 'folder':\n        type = 'folder';\n        title = cloudcast.name;\n        album = mixcloud.getI18n('MIXCLOUD_SHOW');\n        artist = cloudcast.owner?.name || cloudcast.owner?.username;\n        duration = cloudcast.duration;\n        albumart = cloudcast.thumbnail;\n\n        const cloudcastView: CloudcastView = {\n          name: 'cloudcast',\n          cloudcastId: cloudcast.id\n        };\n        uri = `${this.uri}/${ViewHelper.constructUriSegmentFromView(cloudcastView)}`;\n\n        if (cloudcast.isExclusive) {\n          title = UIHelper.addExclusiveText(title);\n        }\n        if (showMoreFromUser) {\n          uri += '@showMoreFromUser=1';\n        }\n        break;\n\n      case 'playShowItem':\n        if (cloudcast.isExclusive) {\n          type = 'item-no-menu';\n          title = UIHelper.styleText(mixcloud.getI18n('MIXCLOUD_EXCLUSIVE_DESC'), UI_STYLES.EXCLUSIVE_DESC);\n          uri = `${this.uri}@noExplode=1`;\n          icon = 'fa fa-ban';\n        }\n        else {\n          type = 'song';\n          title = mixcloud.getI18n('MIXCLOUD_PLAY_SHOW');\n          duration = cloudcast.duration;\n          albumart = cloudcast.thumbnail;\n          uri = this.uri;\n        }\n        break;\n    }\n\n    return {\n      service: 'mixcloud',\n      type,\n      title,\n      album,\n      artist,\n      duration,\n      albumart,\n      icon,\n      uri\n    };\n  }\n\n  renderToHeader(cloudcast: CloudcastEntity): RenderedHeader | null {\n    return {\n      uri: this.uri,\n      service: 'mixcloud',\n      type: 'song',\n      title: cloudcast.name,\n      artist: mixcloud.getI18n('MIXCLOUD_HEADER_SHOW', cloudcast.owner?.name || cloudcast.owner?.username),\n      albumart: cloudcast.thumbnail\n    };\n  }\n}\n"]}