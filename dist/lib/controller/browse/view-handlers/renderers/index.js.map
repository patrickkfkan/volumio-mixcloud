{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../src/lib/controller/browse/view-handlers/renderers/index.ts"],"names":[],"mappings":";;;;;;AACA,4EAAoD;AACpD,0EAAkD;AAClD,kEAA0C;AAC1C,kEAA0C;AAE1C,IAAY,YAKX;AALD,WAAY,YAAY;IACtB,uCAAuB,CAAA;IACvB,qCAAqB,CAAA;IACrB,6BAAa,CAAA;IACb,6BAAa,CAAA;AACf,CAAC,EALW,YAAY,4BAAZ,YAAY,QAKvB;AAED,MAAM,sBAAsB,GAAqB;IAC/C,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,2BAAiB;IAC3C,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,0BAAgB;IACzC,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,sBAAY;IACjC,CAAC,YAAY,CAAC,IAAI,CAAC,EAAE,sBAAY;CAClC,CAAC;AAEF,MAAqB,QAAQ;IAM3B,MAAM,CAAC,WAAW,CAAC,IAAkB,EAAE,GAAW,EAAE,WAAiB,EAAE,aAAqB;QAC1F,IAAI,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC;YACjC,OAAO,IAAI,sBAAsB,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,WAAW,EAAE,aAAa,CAAC,CAAC;QAC3E,CAAC;QACD,MAAM,KAAK,CAAC,+BAA+B,YAAY,EAAE,CAAC,CAAC;IAC7D,CAAC;CACF;AAZD,2BAYC","sourcesContent":["import View from '../View';\nimport CloudcastRenderer from './CloudcastRenderer';\nimport PlaylistRenderer from './PlaylistRenderer';\nimport SlugRenderer from './SlugRenderer';\nimport UserRenderer from './UserRenderer';\n\nexport enum RendererType {\n  Cloudcast = 'Cloudcast',\n  Playlist = 'Playlist',\n  Slug = 'Slug',\n  User = 'User'\n}\n\nconst RENDERER_TYPE_TO_CLASS: Record<any, any> = {\n  [RendererType.Cloudcast]: CloudcastRenderer,\n  [RendererType.Playlist]: PlaylistRenderer,\n  [RendererType.Slug]: SlugRenderer,\n  [RendererType.User]: UserRenderer\n};\n\nexport default class Renderer {\n\n  static getInstance(type: RendererType.Cloudcast, uri: string, currentView: View, previousViews: View[]): CloudcastRenderer;\n  static getInstance(type: RendererType.Playlist, uri: string, currentView: View, previousViews: View[]): PlaylistRenderer;\n  static getInstance(type: RendererType.Slug, uri: string, currentView: View, previousViews: View[]): SlugRenderer;\n  static getInstance(type: RendererType.User, uri: string, currentView: View, previousViews: View[]): UserRenderer;\n  static getInstance(type: RendererType, uri: string, currentView: View, previousViews: View[]) {\n    if (RENDERER_TYPE_TO_CLASS[type]) {\n      return new RENDERER_TYPE_TO_CLASS[type](uri, currentView, previousViews);\n    }\n    throw Error(`Renderer not found for type ${RendererType}`);\n  }\n}\n"]}