{"version":3,"file":"LiveStreamProxy.js","sourceRoot":"","sources":["../../../../src/lib/controller/play/LiveStreamProxy.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChildProcess, spawn } from 'child_process';\nimport net from 'net';\nimport { EOL } from 'os';\nimport { EventEmitter } from 'events';\nimport getPort from 'get-port';\nimport pidtree from 'pidtree';\nimport mixcloud from '../../MixcloudContext';\n\nconst PROXY_URL = 'http://localhost';\n\nconst CMD_TEMPLATE =\n  `streamlink \\\\\n    \"{LIVE_STREAM_HLS_URL}\" \\\\\n    best \\\\\n    --stdout \\\\\n  | \\\\\n  ffmpeg -hide_banner -loglevel error \\\\\n    -i - \\\\\n    -map 0:a \\\\\n    -f mpegts \\\\\n    -listen 1 \"${PROXY_URL}:{PORT}\"`;\n\n/**\n * Mixcloud live streams cannot be handled directly by FFmpeg,\n * at least with the version that came with Volumio:\n * - Live streams are HLS-fMP4 instead of HLS-TS which you get for regular shows.\n * - FFmpeg doesn't handle HLS-fMP4 playlists well and invariably returns\n *   'invalid data' errors beyond the first MP4 fragment. The errors seem to\n *   arise when processing video data contained in the fragments.\n *\n * Instead of passing the live stream URL directly to FFmpeg (through MPD),\n * we use a proxy mechanism:\n * - Use Streamlink (https://github.com/streamlink/streamlink) to handle the\n *   HLS-fMP4 playlist and read the MP4 fragments.\n * - Pipe the stream data produced by Streamlink to an FFmpeg process, where we:\n *   1. Extract audio from the stream data\n *   2. Convert the audio-only stream to MPEG-TS format\n *   3. Set the FFmpeg instance to listener mode with a 'proxy stream URL'.\n *\n * The 'proxy stream URL' will thus return an MPEG-TS audio stream that can be\n * handled correctly by MPD. With FFmpeg (the instance created by the proxy) set\n * in listener mode, the Streamlink + audio extraction / conversion process starts\n * when the proxy stream URL is connected to.\n *\n * Note that this process has been tested to work with MPD + FFmpeg on Volumio.\n * There is no guarantee that it will work elsewhere. In fact, preliminary testing\n * with FFmpeg 6 fails - but that doesn't concern us for now.\n */\n\nexport default class LiveStreamProxy {\n\n  #liveStreamHLSUrl: string;\n  #process: ChildProcess | null;\n  #isRunning: boolean;\n\n  constructor(liveStreamHLSUrl: string) {\n    this.#liveStreamHLSUrl = liveStreamHLSUrl;\n    this.#process = null;\n    this.#isRunning = false;\n  }\n\n  start() {\n    return new Promise<string>(async (resolve, reject) => {\n      const port = await getPort();\n      const cmd = CMD_TEMPLATE\n        .replace('{LIVE_STREAM_HLS_URL}', this.#liveStreamHLSUrl)\n        .replace('{PORT}', String(port));\n      const s = spawn(cmd, { uid: 1000, gid: 1000, shell: true });\n      const pid = s.pid;\n      let lastError: Error | null = null;\n      const preStartErrors: string[] = [];\n\n      mixcloud.getLogger().info(`[mixcloud] (PID: ${pid}) LiveStreamProxy: process spawned for cmd: ${cmd}`);\n\n      const portMonitor = new PortMonitor(port);\n      portMonitor\n        .once('bind', () => {\n          this.#isRunning = true;\n          resolve(`${PROXY_URL}:${port}`);\n        })\n        .start();\n\n      /**\n       * Streamlink piped to ffmpeg with --stdout, so all original stdout\n       * messages from Streamlink get sent to stderr instead.\n       */\n\n      s.stderr.on('data', (msg) => {\n        const _msg = msg.toString() as string;\n        mixcloud.getLogger().info(`[mixcloud] (PID: ${pid}) LiveStreamProxy: ${_msg}`);\n        if (!this.#isRunning && _msg.toLowerCase().includes('error:')) {\n          preStartErrors.push(_msg);\n        }\n      });\n\n      s.stdout.on('data', (msg) => {\n        const _msg = msg.toString();\n        mixcloud.getLogger().info(`[mixcloud] (PID: ${pid}) LiveStreamProxy: ${_msg}`);\n      });\n\n      s.on('close', (code, signal) => {\n        mixcloud.getLogger().info(`[mixcloud] (PID: ${pid}) LiveStreamProxy: process closed - code: ${code}, signal: ${signal}`);\n        if (!this.#isRunning) {\n          if (lastError) {\n            reject(lastError);\n          }\n          else if (preStartErrors.length > 0) {\n            reject(Error(preStartErrors.join(EOL)));\n          }\n          else {\n            reject(Error('Unknown cause'));\n          }\n        }\n        portMonitor.stop();\n        portMonitor.removeAllListeners();\n        this.#reset();\n      });\n\n      s.on('error', (err) => {\n        mixcloud.getLogger().error(`[mixcloud] (PID: ${pid}) LiveStreamProxy: process error: ${err.message}`);\n        lastError = err;\n      });\n\n      this.#process = s;\n    });\n  }\n\n  /**\n   * Normally you don't have to call this, because streamlink and ffmpeg processes created by\n   * the proxy end automatically when the stream playback ends or the connection to the proxy\n   * stream URL disconnects (such as when MPD switches to a different song).\n   * On the other hand, if MPD fails to connect to the proxy stream URL, then we would have to\n   * kill the proxy manually.\n   *\n   * @returns\n   */\n  async kill() {\n    if (!this.#isRunning || !this.#process) {\n      mixcloud.getLogger().warn('[mixcloud] LiveStreamProxy: cannot kill process that is not running');\n      return;\n    }\n    const proc = this.#process;\n    return new Promise<void>(async (resolve) => {\n      let tree: number[];\n      try {\n        tree = await pidtree(proc.pid, { root: true });\n      }\n      catch (error) {\n        mixcloud.getLogger().warn(\n          mixcloud.getErrorMessage('[mixcloud] LiveStreamProxy: failed to obtain PID tree for killing - resolving anyway: ', error));\n        this.#reset();\n        resolve();\n        return;\n      }\n      let cleanKill = true;\n      let pid = tree.shift();\n      while (pid) {\n        try {\n          if (this.#pidExists(pid)) {\n            mixcloud.getLogger().info(`[mixcloud] LiveStreamProxy: killing PID ${pid}`);\n            this.#sigkill(pid);\n          }\n        }\n        catch (error) {\n          mixcloud.getLogger().warn(\n            mixcloud.getErrorMessage(`[mixcloud] LiveStreamProxy: error killing PID ${pid} - proceeding anyway: `, error));\n          cleanKill = false;\n        }\n        pid = tree.shift();\n      }\n      this.#reset();\n      if (cleanKill) {\n        mixcloud.getLogger().info('[mixcloud] LiveStreamProxy killed');\n      }\n      else {\n        mixcloud.getLogger().warn('[mixcloud] LiveStreamProxy killed uncleanly - there may be zombie processes left behind.');\n      }\n      resolve();\n    });\n  }\n\n  #sigkill(pid: number) {\n    process.kill(pid, 'SIGKILL');\n  }\n\n  #pidExists(pid: number) {\n    try {\n      process.kill(pid, 0);\n      return true;\n    }\n    catch (error) {\n      return false;\n    }\n  }\n\n  #reset() {\n    if (this.#process) {\n      this.#process.stdout?.removeAllListeners();\n      this.#process.stderr?.removeAllListeners();\n      this.#process.removeAllListeners();\n      this.#process = null;\n      this.#isRunning = false;\n    }\n  }\n}\n\nclass PortMonitor extends EventEmitter {\n\n  #port: number;\n  #checkTimer: NodeJS.Timeout | null;\n\n  constructor(port: number) {\n    super();\n    this.#port = port;\n    this.#checkTimer = null;\n  }\n\n  start() {\n    if (this.#checkTimer) {\n      return;\n    }\n\n    this.#checkTimer = setTimeout(async () => {\n      this.#clearTimer();\n      if (!(await this.#isPortAvailable())) {\n        this.emit('bind');\n      }\n      else {\n        this.start();\n      }\n    }, 500);\n  }\n\n  stop() {\n    this.#clearTimer();\n  }\n\n  #clearTimer() {\n    if (this.#checkTimer) {\n      clearTimeout(this.#checkTimer);\n      this.#checkTimer = null;\n    }\n  }\n\n  // https://stackoverflow.com/questions/19129570/how-can-i-check-if-port-is-busy-in-nodejs\n  async #isPortAvailable() {\n    return new Promise((resolve) => {\n      const s = net.createServer();\n      s.once('error', (err: any & { code: string }) => {\n        s.close();\n        if (err && err.code == 'EADDRINUSE') {\n          resolve(false);\n        }\n        else {\n          //Reject(err);\n          resolve(true);\n        }\n      });\n      s.once('listening', () => {\n        resolve(true);\n        s.close();\n      });\n      s.listen(this.#port);\n    });\n  }\n}\n"]}