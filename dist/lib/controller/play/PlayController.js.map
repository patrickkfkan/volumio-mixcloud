{"version":3,"file":"PlayController.js","sourceRoot":"","sources":["../../../../src/lib/controller/play/PlayController.ts"],"names":[],"mappings":"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","sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nimport libQ from 'kew';\n\nimport miniget from 'miniget';\nimport { Parser as m3u8Parser } from 'm3u8-parser';\nimport mixcloud from '../../MixcloudContext';\nimport { ExplodedTrackInfo } from '../browse/view-handlers/ExplodableViewHandler';\nimport ViewHelper from '../browse/view-handlers/ViewHelper';\nimport Model, { ModelType } from '../../model';\n\nexport default class PlayController {\n\n  #mpdPlugin: any;\n\n  constructor() {\n    this.#mpdPlugin = mixcloud.getMpdPlugin();\n  }\n\n  /**\n   * Track uri:\n   * - mixcloud/cloudcast@cloudcastId={...}@owner={...}\n   */\n  async clearAddPlayTrack(track: ExplodedTrackInfo) {\n    mixcloud.getLogger().info(`[mixcloud] clearAddPlayTrack: ${track.uri}`);\n\n    let streamUrl;\n    try {\n      streamUrl = await this.#getStreamUrl(track);\n    }\n    catch (error: any) {\n      mixcloud.getLogger().error(`[mixcloud] Error getting stream: ${error}`);\n      throw error;\n    }\n\n    return this.#doPlay(streamUrl, track);\n  }\n\n  // Returns kew promise!\n  stop() {\n    mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.stop();\n  }\n\n  // Returns kew promise!\n  pause() {\n    mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.pause();\n  }\n\n  // Returns kew promise!\n  resume() {\n    mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.resume();\n  }\n\n  // Returns kew promise!\n  seek(position: number) {\n    mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.seek(position);\n  }\n\n  // Returns kew promise!\n  next() {\n    mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n    return this.#mpdPlugin.next();\n  }\n\n  // Returns kew promise!\n  previous() {\n    mixcloud.getStateMachine().setConsumeUpdateService(undefined);\n    return mixcloud.getStateMachine().previous();\n  }\n\n  async #getStreamUrl(track: ExplodedTrackInfo): Promise<string> {\n    let streamUrl = await this.#doGetStreamUrl(track);\n\n    // Safe\n    streamUrl = streamUrl.replace(/\"/g, '\\\\\"');\n\n    /**\n     * 1. Add bitrate info to track\n     * 2. Fool MPD plugin to return correct `trackType` in `parseTrackInfo()` by adding\n     * track type to URL query string as a dummy param.\n     */\n    if (streamUrl.includes('mp3-128')) {\n      track.samplerate = '128 kbps';\n      streamUrl += '&t.mp3';\n    }\n    else if (streamUrl.includes('mp3-v0')) {\n      track.samplerate = 'HQ VBR';\n      streamUrl += '&t.mp3';\n    }\n\n    return streamUrl;\n  }\n\n  async #doGetStreamUrl(track: ExplodedTrackInfo): Promise<string> {\n    const views = ViewHelper.getViewsFromUri(track.uri);\n    let trackView = views[1];\n    if (!trackView) {\n      trackView = { name: '' };\n    }\n    if (trackView.name === 'cloudcast' && trackView.cloudcastId) {\n      const cloudcastId = trackView.cloudcastId;\n      const cloudcast = await Model.getInstance(ModelType.Cloudcast).getCloudcast(cloudcastId);\n      const stream = cloudcast?.streams?.hls || cloudcast?.streams?.http || cloudcast?.streams?.dash || null;\n      if (!stream) {\n        if (cloudcast?.isExclusive) {\n          mixcloud.toast('warning', mixcloud.getI18n('MIXCLOUD_SKIP_EXCLUSIVE', track.name));\n          mixcloud.getStateMachine().next();\n          throw Error('Skipping exclusive cloudcast');\n        }\n        else {\n          mixcloud.toast('error', mixcloud.getI18n('MIXCLOUD_NO_STREAM', track.name));\n          if (!cloudcast) {\n            throw Error(`Stream not found for cloudcastId: ${cloudcastId} (Cloudcast does not exist)`);\n          }\n          throw Error(`Stream not found for cloudcastId: ${cloudcastId} (URL: ${cloudcast.url})`);\n        }\n      }\n      else {\n        // We setConsumeUpdateService to ignore metadata, so statemachine will take sample rate and bit depth from\n        // Trackblock, which we don't have...At best, if stream is HLS, we try to obtain the max bit rate (bandwidth) and set it\n        // As the sample rate. Otherwise, statemachine will obtain the bitrate from MPD but this is not always available.\n        if (cloudcast?.streams?.hls) {\n          const bandwidth = await this.#getBandwidthFromHLS(stream);\n          if (bandwidth) {\n            const bitrate = `${Math.floor(bandwidth / 1000)} kbps`;\n            track.samplerate = bitrate;\n          }\n        }\n        const safeUri = stream.replace(/\"/g, '\\\\\"');\n        return safeUri;\n      }\n    }\n\n    mixcloud.toast('error', mixcloud.getI18n('MIXCLOUD_INVALID_TRACK_URI', track.uri));\n    throw Error(`Invalid track URI: ${track.uri}`);\n  }\n\n  // Returns kew promise!\n  #doPlay(streamUrl: string, track: ExplodedTrackInfo) {\n    const mpdPlugin = this.#mpdPlugin;\n\n    return mpdPlugin.sendMpdCommand('stop', [])\n      .then(() => {\n        return mpdPlugin.sendMpdCommand('clear', []);\n      })\n      .then(() => {\n        return mpdPlugin.sendMpdCommand(`addid \"${streamUrl}\"`, []);\n      })\n      .then((addIdResp: { Id: string }) => this.#mpdAddTags(addIdResp, track))\n      .then(() => {\n        mixcloud.getStateMachine().setConsumeUpdateService('mpd', true, false);\n        return mpdPlugin.sendMpdCommand('play', []);\n      });\n  }\n\n  // Returns kew promise!\n  #mpdAddTags(mpdAddIdResponse: { Id: string }, track: ExplodedTrackInfo) {\n    const songId = mpdAddIdResponse?.Id;\n    if (songId !== undefined) {\n      const cmds = [];\n      cmds.push({\n        command: 'addtagid',\n        parameters: [ songId, 'title', track.title ]\n      });\n      if (track.album) {\n        cmds.push({\n          command: 'addtagid',\n          parameters: [ songId, 'album', track.album ]\n        });\n      }\n      cmds.push({\n        command: 'addtagid',\n        parameters: [ songId, 'artist', track.artist ]\n      });\n\n      return this.#mpdPlugin.sendMpdCommandArray(cmds);\n    }\n    return libQ.resolve();\n  }\n\n  async #getBandwidthFromHLS(streamUrl: string) {\n    const body = await miniget(streamUrl).text();\n    const parser = new m3u8Parser();\n    parser.push(body);\n    parser.end();\n    const playlists = parser.manifest.playlists;\n    if (playlists && Array.isArray(playlists)) {\n      const attributes = playlists[0]?.attributes;\n      if (attributes && typeof attributes === 'object' && Reflect.has(attributes, 'BANDWIDTH')) {\n        const bandwidth = Reflect.get(attributes, 'BANDWIDTH');\n        return Number(bandwidth) || null;\n      }\n    }\n    return null;\n  }\n}\n"]}